// <auto-generated />
using System;
using CCBR.Services.NotificationService;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace NotificationService.Migrations
{
    [DbContext(typeof(NotificationDbContext))]
    [Migration("20250915163810_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CCBR.Services.NotificationService.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Channel")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<bool>("IsRead")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("Metadata")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ReadAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("RelatedEntityId")
                        .HasColumnType("integer");

                    b.Property<string>("RelatedEntityType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("SentAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("Pending");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("Status");

                    b.HasIndex("Type");

                    b.HasIndex("UserId");

                    b.HasIndex("UserId", "IsRead");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("CCBR.Services.NotificationService.NotificationTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Channel")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Template")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.HasKey("Id");

                    b.HasIndex("Type", "Channel")
                        .IsUnique();

                    b.ToTable("NotificationTemplates");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Channel = "Email",
                            CreatedAt = new DateTime(2025, 9, 15, 16, 38, 4, 675, DateTimeKind.Utc).AddTicks(4016),
                            IsActive = true,
                            Subject = "Order Confirmation - {{OrderNumber}}",
                            Template = "\r\n                    <h2>Thank you for your order!</h2>\r\n                    <p>Your order {{OrderNumber}} has been successfully placed.</p>\r\n                    <p><strong>Order Details:</strong></p>\r\n                    <ul>\r\n                        {{#each Items}}\r\n                        <li>{{ProductName}} - Quantity: {{Quantity}} - Price: ${{Price}}</li>\r\n                        {{/each}}\r\n                    </ul>\r\n                    <p><strong>Total: ${{TotalAmount}}</strong></p>\r\n                    <p>Order Date: {{OrderDate}}</p>\r\n                ",
                            Type = "OrderCreated",
                            UpdatedAt = new DateTime(2025, 9, 15, 16, 38, 4, 675, DateTimeKind.Utc).AddTicks(4415)
                        },
                        new
                        {
                            Id = 2,
                            Channel = "Email",
                            CreatedAt = new DateTime(2025, 9, 15, 16, 38, 4, 675, DateTimeKind.Utc).AddTicks(4636),
                            IsActive = true,
                            Subject = "Your Order {{OrderNumber}} Has Been Shipped",
                            Template = "\r\n                    <h2>Your order is on its way!</h2>\r\n                    <p>Your order {{OrderNumber}} has been shipped and is on its way to you.</p>\r\n                    <p>You can track your package using the tracking information provided.</p>\r\n                    <p>Expected delivery: 3-5 business days</p>\r\n                ",
                            Type = "OrderShipped",
                            UpdatedAt = new DateTime(2025, 9, 15, 16, 38, 4, 675, DateTimeKind.Utc).AddTicks(4637)
                        },
                        new
                        {
                            Id = 4,
                            Channel = "InApp",
                            CreatedAt = new DateTime(2025, 9, 15, 16, 38, 4, 675, DateTimeKind.Utc).AddTicks(4640),
                            IsActive = true,
                            Subject = "Order Confirmed",
                            Template = "Your order {{OrderNumber}} for ${{TotalAmount}} has been confirmed and is being processed.",
                            Type = "OrderCreated",
                            UpdatedAt = new DateTime(2025, 9, 15, 16, 38, 4, 675, DateTimeKind.Utc).AddTicks(4641)
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
